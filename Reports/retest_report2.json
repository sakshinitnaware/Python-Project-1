{"created": 1751286194.2106373, "duration": 448.3678011894226, "exitcode": 1, "root": "F:\\Assignments\\python_code\\project-1", "environment": {}, "summary": {"passed": 2, "failed": 1, "total": 3, "collected": 10, "deselected": 7}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "TestScript/testscript.py", "type": "Module"}]}, {"nodeid": "TestScript/testscript.py", "outcome": "passed", "result": [{"nodeid": "TestScript/testscript.py::test_tc_1_url_validity", "type": "Function", "lineno": 14}, {"nodeid": "TestScript/testscript.py::test_tc_2_title_check", "type": "Function", "lineno": 21}, {"nodeid": "TestScript/testscript.py::test_tc_3_login_button_clickable", "type": "Function", "lineno": 30}, {"nodeid": "TestScript/testscript.py::test_tc_4_signup_button_clickable", "type": "Function", "lineno": 42}, {"nodeid": "TestScript/testscript.py::test_tc_5_signup_redirect", "type": "Function", "lineno": 52}, {"nodeid": "TestScript/testscript.py::test_tc_6_valid_login", "type": "Function", "lineno": 62}, {"nodeid": "TestScript/testscript.py::test_tc_7_invalid_login", "type": "Function", "lineno": 76}, {"nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items", "type": "Function", "lineno": 92}, {"nodeid": "TestScript/testscript.py::test_tc_9_dobby_visible", "type": "Function", "lineno": 110}, {"nodeid": "TestScript/testscript.py::test_tc_10_logout_functionality", "type": "Function", "lineno": 127}]}], "tests": [{"nodeid": "TestScript/testscript.py::test_tc_6_valid_login", "lineno": 62, "outcome": "passed", "keywords": ["test_tc_6_valid_login", "testscript.py", "TestScript", "project-1", ""], "setup": {"duration": 61.68881649998366, "outcome": "passed"}, "call": {"duration": 43.18390949998866, "outcome": "passed"}, "teardown": {"duration": 19.63240269999369, "outcome": "passed"}}, {"nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items", "lineno": 92, "outcome": "failed", "keywords": ["test_tc_8_top_menu_items", "testscript.py", "TestScript", "project-1", ""], "setup": {"duration": 118.91607109998586, "outcome": "passed"}, "call": {"duration": 100.38614329998381, "outcome": "failed", "crash": {"path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\n  (Session info: chrome=137.0.7151.120)\nStacktrace:\n\tGetHandleVerifier [0x0x933b03+62899]\n\tGetHandleVerifier [0x0x933b44+62964]\n\t(No symbol) [0x0x7610f3]\n\t(No symbol) [0x0x7afb30]\n\t(No symbol) [0x0x7adeea]\n\t(No symbol) [0x0x7aba67]\n\t(No symbol) [0x0x7aad37]\n\t(No symbol) [0x0x79f3e5]\n\t(No symbol) [0x0x7ce50c]\n\t(No symbol) [0x0x79ee74]\n\t(No symbol) [0x0x7ce784]\n\t(No symbol) [0x0x7efd81]\n\t(No symbol) [0x0x7ce306]\n\t(No symbol) [0x0x79d670]\n\t(No symbol) [0x0x79e4e4]\n\tGetHandleVerifier [0x0xb94793+2556483]\n\tGetHandleVerifier [0x0xb8fd02+2537394]\n\tGetHandleVerifier [0x0x95a2fa+220586]\n\tGetHandleVerifier [0x0x94aae8+157080]\n\tGetHandleVerifier [0x0x95141d+184013]\n\tGetHandleVerifier [0x0x93ba68+95512]\n\tGetHandleVerifier [0x0x93bc10+95936]\n\tGetHandleVerifier [0x0x926b5a+9738]\n\tBaseThreadInitThunk [0x0x7570fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]"}, "traceback": [{"path": "TestScript\\testscript.py", "lineno": 107, "message": ""}, {"path": "Pages\\dashboard_page.py", "lineno": 30, "message": "in top_menu_bar"}, {"path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 119, "message": "in click"}, {"path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 572, "message": "in _execute"}, {"path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 429, "message": "in execute"}, {"path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "ElementClickInterceptedException"}], "longrepr": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"976db93fe1e691ad69868ea0759f8d0f\")>\n\n    def test_tc_8_top_menu_items(setup):\n        # Create instance of loginPage\n        login = LoginPage(setup)\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Submit login form\n        login.submit_login()\n        # Create instance of DashboardPage after login\n        print(\"DashBoard instance\")\n        dashboard = DashboardPage(setup)\n        # Assert that all expected top menu items are visible\n>       assert dashboard.top_menu_bar(), \"Top menu items are missing or not visible\"\n\nTestScript\\testscript.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\dashboard_page.py:30: in top_menu_bar\n    redirecting_guvi.click()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002205E81DA90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\nE         (Session info: chrome=137.0.7151.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x933b03+62899]\nE       \tGetHandleVerifier [0x0x933b44+62964]\nE       \t(No symbol) [0x0x7610f3]\nE       \t(No symbol) [0x0x7afb30]\nE       \t(No symbol) [0x0x7adeea]\nE       \t(No symbol) [0x0x7aba67]\nE       \t(No symbol) [0x0x7aad37]\nE       \t(No symbol) [0x0x79f3e5]\nE       \t(No symbol) [0x0x7ce50c]\nE       \t(No symbol) [0x0x79ee74]\nE       \t(No symbol) [0x0x7ce784]\nE       \t(No symbol) [0x0x7efd81]\nE       \t(No symbol) [0x0x7ce306]\nE       \t(No symbol) [0x0x79d670]\nE       \t(No symbol) [0x0x79e4e4]\nE       \tGetHandleVerifier [0x0xb94793+2556483]\nE       \tGetHandleVerifier [0x0xb8fd02+2537394]\nE       \tGetHandleVerifier [0x0x95a2fa+220586]\nE       \tGetHandleVerifier [0x0x94aae8+157080]\nE       \tGetHandleVerifier [0x0x95141d+184013]\nE       \tGetHandleVerifier [0x0x93ba68+95512]\nE       \tGetHandleVerifier [0x0x93bc10+95936]\nE       \tGetHandleVerifier [0x0x926b5a+9738]\nE       \tBaseThreadInitThunk [0x0x7570fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "teardown": {"duration": 4.036195799999405, "outcome": "passed"}}, {"nodeid": "TestScript/testscript.py::test_tc_9_dobby_visible", "lineno": 110, "outcome": "passed", "keywords": ["test_tc_9_dobby_visible", "testscript.py", "TestScript", "project-1", ""], "setup": {"duration": 41.767204800009495, "outcome": "passed"}, "call": {"duration": 43.83828269998776, "outcome": "passed"}, "teardown": {"duration": 3.3671564999967813, "outcome": "passed"}}]}