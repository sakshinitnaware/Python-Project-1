{
    "created": null,
    "duration": 3615.0323803424835,
    "summary": {
        "passed": 10,
        "failed": 6,
        "skipped": 0,
        "total": 19
    },
    "tests": [
        {
            "nodeid": "TestScript/testscript.py::test_tc_1_url_validity",
            "lineno": 14,
            "outcome": "passed",
            "keywords": [
                "test_tc_1_url_validity",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 17.34546800001408,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013539200008381158,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 2.4825426999886986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_2_title_check",
            "lineno": 21,
            "outcome": "passed",
            "keywords": [
                "test_tc_2_title_check",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 33.01860390001093,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013158599991584197,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 2.4822194000007585,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_3_login_button_clickable",
            "lineno": 30,
            "outcome": "passed",
            "keywords": [
                "test_tc_3_login_button_clickable",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 55.67703819999588,
                "outcome": "passed"
            },
            "call": {
                "duration": 23.410147700022208,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 2.6554392999969423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_4_signup_button_clickable",
            "lineno": 42,
            "outcome": "passed",
            "keywords": [
                "test_tc_4_signup_button_clickable",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 53.19303930000751,
                "outcome": "passed"
            },
            "call": {
                "duration": 111.77944009998464,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 2.99583800000255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_5_signup_redirect",
            "lineno": 52,
            "outcome": "passed",
            "keywords": [
                "test_tc_5_signup_redirect",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 63.810003899998264,
                "outcome": "passed"
            },
            "call": {
                "duration": 79.70619339999394,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 4.559863800008316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_6_valid_login",
            "lineno": 62,
            "outcome": "failed",
            "keywords": [
                "test_tc_6_valid_login",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 41.268090999976266,
                "outcome": "passed"
            },
            "call": {
                "duration": 172.00730140000815,
                "outcome": "failed",
                "crash": {
                    "path": "F:\\Assignments\\python_code\\project-1\\TestScript\\testscript.py",
                    "lineno": 73,
                    "message": "AssertionError: Login failed with valid credentials\nassert False\n +  where False = submit_login()\n +    where submit_login = <Pages.login_page.LoginPage object at 0x00000205A3B59810>.submit_login"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 73,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c0254677ca2d88297e9696981cb3407\")>\n\n    def test_tc_6_valid_login(setup):\n        # Create instance of LoginPage\n        login = LoginPage(setup)\n        # Click login button to open login form\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Assert that user is redirected to dashboard or profile page\n>       assert login.submit_login(), \"Login failed with valid credentials\"\nE       AssertionError: Login failed with valid credentials\nE       assert False\nE        +  where False = submit_login()\nE        +    where submit_login = <Pages.login_page.LoginPage object at 0x00000205A3B59810>.submit_login\n\nTestScript\\testscript.py:73: AssertionError"
            },
            "teardown": {
                "duration": 82.54206659999909,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_7_invalid_login",
            "lineno": 76,
            "outcome": "error",
            "keywords": [
                "test_tc_7_invalid_login",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 129.35524089998216,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                    "lineno": 367,
                    "message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51529): Read timed out. (read timeout=120)"
                },
                "traceback": [
                    {
                        "path": "environment_setup.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 454,
                        "message": "in get"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 427,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 404,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 428,
                        "message": "in _request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 143,
                        "message": "in request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 278,
                        "message": "in request_encode_body"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py",
                        "lineno": 443,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 841,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py",
                        "lineno": 474,
                        "message": "in increment"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py",
                        "lineno": 39,
                        "message": "in reraise"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 787,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 536,
                        "message": "in _make_request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 367,
                        "message": "ReadTimeoutError"
                    }
                ],
                "longrepr": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3C016A0>\nconn = <urllib3.connection.HTTPConnection object at 0x00000205A3C017B0>, method = 'POST'\nurl = '/session/0abe57b635751da2fd526098f116ee67/url', body = '{\"url\": \"https://www.guvi.in\"}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.29.0 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None\npreload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x00000205A3C06CB0>, b = <memory at 0x00000205A3B34C40>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           TimeoutError: timed out\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        driver = None\n    \n        try:\n            # Try launching Chrome in headless mode\n            chrome_options = ChromeOptions()\n            chrome_options.add_argument(\"--headless=new\")\n            chrome_options.add_argument(\"--no-sandbox\")\n            chrome_options.add_argument(\"--disable-dev-shm-usage\")\n            chrome_options.add_argument(\"--window-size=1920,1080\")\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n            print(\"Launched Chrome in headless mode.\")\n        except Exception as e1:\n            print(\"Chrome not available:\", e1)\n            try:\n                # Try launching Firefox in headless mode\n                firefox_options = FirefoxOptions()\n                firefox_options.add_argument(\"--headless\")\n                firefox_options.add_argument(\"--no-sandbox\")\n                firefox_options.add_argument(\"--disable-dev-shm-usage\")\n                firefox_options.add_argument(\"--window-size=1920,1080\")\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=firefox_options)\n                print(\"Launched Firefox in headless mode.\")\n            except Exception as e2:\n                print(\"Firefox not available:\", e2)\n                try:\n                    # Try launching Edge in headless mode\n                    edge_options = EdgeOptions()\n                    edge_options.add_argument(\"--headless=new\")\n                    edge_options.add_argument(\"--no-sandbox\")\n                    edge_options.add_argument(\"--disable-dev-shm-usage\")\n                    edge_options.add_argument(\"--window-size=1920,1080\")\n                    driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=edge_options)\n                    print(\"Launched Edge in headless mode.\")\n                except Exception as e3:\n                    print(\"Edge not available:\", e3)\n                    raise Exception(\"No supported browser is available in headless mode on this system.\")\n    \n        # Load target website\n>       driver.get(\"https://www.guvi.in\")\n\nenvironment_setup.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3C016A0>\nerr = TimeoutError('timed out'), url = '/session/0abe57b635751da2fd526098f116ee67/url', timeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51529): Read timed out. (read timeout=120)\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"
            },
            "teardown": {
                "duration": 0.0003941000031773001,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items",
            "lineno": 92,
            "outcome": "error",
            "keywords": [
                "test_tc_8_top_menu_items",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 128.33627379999962,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                    "lineno": 367,
                    "message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51565): Read timed out. (read timeout=120)"
                },
                "traceback": [
                    {
                        "path": "environment_setup.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 454,
                        "message": "in get"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 427,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 404,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 428,
                        "message": "in _request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 143,
                        "message": "in request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 278,
                        "message": "in request_encode_body"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py",
                        "lineno": 443,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 841,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py",
                        "lineno": 474,
                        "message": "in increment"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py",
                        "lineno": 39,
                        "message": "in reraise"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 787,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 536,
                        "message": "in _make_request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 367,
                        "message": "ReadTimeoutError"
                    }
                ],
                "longrepr": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3C02E00>\nconn = <urllib3.connection.HTTPConnection object at 0x00000205A3C02F10>, method = 'POST'\nurl = '/session/7c1d6826897e1f5c092d99589e2e9740/url', body = '{\"url\": \"https://www.guvi.in\"}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.29.0 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None\npreload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x00000205A3C43B80>, b = <memory at 0x00000205A3B35000>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           TimeoutError: timed out\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        driver = None\n    \n        try:\n            # Try launching Chrome in headless mode\n            chrome_options = ChromeOptions()\n            chrome_options.add_argument(\"--headless=new\")\n            chrome_options.add_argument(\"--no-sandbox\")\n            chrome_options.add_argument(\"--disable-dev-shm-usage\")\n            chrome_options.add_argument(\"--window-size=1920,1080\")\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n            print(\"Launched Chrome in headless mode.\")\n        except Exception as e1:\n            print(\"Chrome not available:\", e1)\n            try:\n                # Try launching Firefox in headless mode\n                firefox_options = FirefoxOptions()\n                firefox_options.add_argument(\"--headless\")\n                firefox_options.add_argument(\"--no-sandbox\")\n                firefox_options.add_argument(\"--disable-dev-shm-usage\")\n                firefox_options.add_argument(\"--window-size=1920,1080\")\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=firefox_options)\n                print(\"Launched Firefox in headless mode.\")\n            except Exception as e2:\n                print(\"Firefox not available:\", e2)\n                try:\n                    # Try launching Edge in headless mode\n                    edge_options = EdgeOptions()\n                    edge_options.add_argument(\"--headless=new\")\n                    edge_options.add_argument(\"--no-sandbox\")\n                    edge_options.add_argument(\"--disable-dev-shm-usage\")\n                    edge_options.add_argument(\"--window-size=1920,1080\")\n                    driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=edge_options)\n                    print(\"Launched Edge in headless mode.\")\n                except Exception as e3:\n                    print(\"Edge not available:\", e3)\n                    raise Exception(\"No supported browser is available in headless mode on this system.\")\n    \n        # Load target website\n>       driver.get(\"https://www.guvi.in\")\n\nenvironment_setup.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3C02E00>\nerr = TimeoutError('timed out'), url = '/session/7c1d6826897e1f5c092d99589e2e9740/url', timeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51565): Read timed out. (read timeout=120)\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"
            },
            "teardown": {
                "duration": 0.00034810000215657055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_9_dobby_visible",
            "lineno": 110,
            "outcome": "failed",
            "keywords": [
                "test_tc_9_dobby_visible",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 90.4469888000167,
                "outcome": "passed"
            },
            "call": {
                "duration": 335.94848099999945,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                    "lineno": 367,
                    "message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51708): Read timed out. (read timeout=120)"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 124,
                        "message": ""
                    },
                    {
                        "path": "Pages\\dashboard_page.py",
                        "lineno": 54,
                        "message": "in is_dobby_visible"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py",
                        "lineno": 137,
                        "message": "in until"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py",
                        "lineno": 631,
                        "message": "in _predicate"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 898,
                        "message": "in find_element"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 427,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 404,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 428,
                        "message": "in _request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 143,
                        "message": "in request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 278,
                        "message": "in request_encode_body"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py",
                        "lineno": 443,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 841,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py",
                        "lineno": 474,
                        "message": "in increment"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py",
                        "lineno": 39,
                        "message": "in reraise"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 787,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 536,
                        "message": "in _make_request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 367,
                        "message": "ReadTimeoutError"
                    }
                ],
                "longrepr": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3B2AE50>\nconn = <urllib3.connection.HTTPConnection object at 0x00000205A3C016A0>, method = 'POST'\nurl = '/session/5c0cb7b9f6e6dbcbeff1001d19377892/element'\nbody = '{\"using\": \"xpath\", \"value\": \"//a[img[contains(@class, \\'guvi_logo\\')]]\"}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.29.0 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None\npreload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x00000205A3C41A20>, b = <memory at 0x00000205A3B35300>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           TimeoutError: timed out\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5c0cb7b9f6e6dbcbeff1001d19377892\")>\n\n    def test_tc_9_dobby_visible(setup):\n        # Create instance of loginPage\n        login = LoginPage(setup)\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Submit login form\n        login.submit_login()\n        # Create instance of DashboardPage after login\n        dashboard = DashboardPage(setup)\n        # Assert that the Dobby Assistant is visible\n>       assert dashboard.is_dobby_visible(), \"Dobby Guvi Assistant not visible on homepage\"\n\nTestScript\\testscript.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages\\dashboard_page.py:54: in is_dobby_visible\n    self.wait.until(EC.element_to_be_clickable((By.XPATH, locator.GUVI_LOGO))).click()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:631: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x00000205A3B2AE50>\nerr = TimeoutError('timed out'), url = '/session/5c0cb7b9f6e6dbcbeff1001d19377892/element'\ntimeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=51708): Read timed out. (read timeout=120)\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"
            },
            "teardown": {
                "duration": 33.1639497000142,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_10_logout_functionality",
            "lineno": 127,
            "outcome": "passed",
            "keywords": [
                "test_tc_10_logout_functionality",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 128.2262386000075,
                "outcome": "passed"
            },
            "call": {
                "duration": 219.1968341000029,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 20.81572920002509,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_6_valid_login",
            "lineno": 62,
            "outcome": "failed",
            "keywords": [
                "test_tc_6_valid_login",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 137.06837059999816,
                "outcome": "passed"
            },
            "call": {
                "duration": 120.57129859999986,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                    "lineno": 367,
                    "message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=52237): Read timed out. (read timeout=120)"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 67,
                        "message": ""
                    },
                    {
                        "path": "Pages\\login_page.py",
                        "lineno": 39,
                        "message": "in click_login_button"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 119,
                        "message": "in click"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 572,
                        "message": "in _execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 427,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 404,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 428,
                        "message": "in _request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 143,
                        "message": "in request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 278,
                        "message": "in request_encode_body"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py",
                        "lineno": 443,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 841,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py",
                        "lineno": 474,
                        "message": "in increment"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py",
                        "lineno": 39,
                        "message": "in reraise"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 787,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 536,
                        "message": "in _make_request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 367,
                        "message": "ReadTimeoutError"
                    }
                ],
                "longrepr": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001C301FB8D70>\nconn = <urllib3.connection.HTTPConnection object at 0x000001C301FBA900>, method = 'POST'\nurl = '/session/5be2f18001f898f6c0d0a461d0c3a20b/element/f.E896EAD7B822C1EEC9DBA850F342B193.d.A328408D14CDD8B903F37FC75603FEAB.e.83/click'\nbody = '{}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.29.0 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None\npreload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001C301960BE0>, b = <memory at 0x000001C3015E65C0>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           TimeoutError: timed out\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5be2f18001f898f6c0d0a461d0c3a20b\")>\n\n    def test_tc_6_valid_login(setup):\n        # Create instance of LoginPage\n        login = LoginPage(setup)\n        # Click login button to open login form\n>       login.click_login_button()\n\nTestScript\\testscript.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\login_page.py:39: in click_login_button\n    self.wait.until(EC.element_to_be_clickable((By.XPATH, locator.LOGIN_BUTTON))).click()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001C301FB8D70>\nerr = TimeoutError('timed out')\nurl = '/session/5be2f18001f898f6c0d0a461d0c3a20b/element/f.E896EAD7B822C1EEC9DBA850F342B193.d.A328408D14CDD8B903F37FC75603FEAB.e.83/click'\ntimeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=52237): Read timed out. (read timeout=120)\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"
            },
            "teardown": {
                "duration": 110.7485708000022,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_7_invalid_login",
            "lineno": 76,
            "outcome": "passed",
            "keywords": [
                "test_tc_7_invalid_login",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 42.45667969997157,
                "outcome": "passed"
            },
            "call": {
                "duration": 58.717548000015086,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 2.791794299992034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items",
            "lineno": 92,
            "outcome": "failed",
            "keywords": [
                "test_tc_8_top_menu_items",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 42.391894400003366,
                "outcome": "passed"
            },
            "call": {
                "duration": 96.35738770000171,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py",
                    "lineno": 232,
                    "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\n  (Session info: chrome=137.0.7151.120)\nStacktrace:\n\tGetHandleVerifier [0x0x11a3b03+62899]\n\tGetHandleVerifier [0x0x11a3b44+62964]\n\t(No symbol) [0x0xfd10f3]\n\t(No symbol) [0x0x101fb30]\n\t(No symbol) [0x0x101deea]\n\t(No symbol) [0x0x101ba67]\n\t(No symbol) [0x0x101ad37]\n\t(No symbol) [0x0x100f3e5]\n\t(No symbol) [0x0x103e50c]\n\t(No symbol) [0x0x100ee74]\n\t(No symbol) [0x0x103e784]\n\t(No symbol) [0x0x105fd81]\n\t(No symbol) [0x0x103e306]\n\t(No symbol) [0x0x100d670]\n\t(No symbol) [0x0x100e4e4]\n\tGetHandleVerifier [0x0x1404793+2556483]\n\tGetHandleVerifier [0x0x13ffd02+2537394]\n\tGetHandleVerifier [0x0x11ca2fa+220586]\n\tGetHandleVerifier [0x0x11baae8+157080]\n\tGetHandleVerifier [0x0x11c141d+184013]\n\tGetHandleVerifier [0x0x11aba68+95512]\n\tGetHandleVerifier [0x0x11abc10+95936]\n\tGetHandleVerifier [0x0x1196b5a+9738]\n\tBaseThreadInitThunk [0x0x7570fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 107,
                        "message": ""
                    },
                    {
                        "path": "Pages\\dashboard_page.py",
                        "lineno": 30,
                        "message": "in top_menu_bar"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 119,
                        "message": "in click"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 572,
                        "message": "in _execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 429,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py",
                        "lineno": 232,
                        "message": "ElementClickInterceptedException"
                    }
                ],
                "longrepr": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"70261133957b7fba0db3a6fc59022cd9\")>\n\n    def test_tc_8_top_menu_items(setup):\n        # Create instance of loginPage\n        login = LoginPage(setup)\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Submit login form\n        login.submit_login()\n        # Create instance of DashboardPage after login\n        print(\"DashBoard instance\")\n        dashboard = DashboardPage(setup)\n        # Assert that all expected top menu items are visible\n>       assert dashboard.top_menu_bar(), \"Top menu items are missing or not visible\"\n\nTestScript\\testscript.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\dashboard_page.py:30: in top_menu_bar\n    redirecting_guvi.click()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C301FBED50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\nE         (Session info: chrome=137.0.7151.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x11a3b03+62899]\nE       \tGetHandleVerifier [0x0x11a3b44+62964]\nE       \t(No symbol) [0x0xfd10f3]\nE       \t(No symbol) [0x0x101fb30]\nE       \t(No symbol) [0x0x101deea]\nE       \t(No symbol) [0x0x101ba67]\nE       \t(No symbol) [0x0x101ad37]\nE       \t(No symbol) [0x0x100f3e5]\nE       \t(No symbol) [0x0x103e50c]\nE       \t(No symbol) [0x0x100ee74]\nE       \t(No symbol) [0x0x103e784]\nE       \t(No symbol) [0x0x105fd81]\nE       \t(No symbol) [0x0x103e306]\nE       \t(No symbol) [0x0x100d670]\nE       \t(No symbol) [0x0x100e4e4]\nE       \tGetHandleVerifier [0x0x1404793+2556483]\nE       \tGetHandleVerifier [0x0x13ffd02+2537394]\nE       \tGetHandleVerifier [0x0x11ca2fa+220586]\nE       \tGetHandleVerifier [0x0x11baae8+157080]\nE       \tGetHandleVerifier [0x0x11c141d+184013]\nE       \tGetHandleVerifier [0x0x11aba68+95512]\nE       \tGetHandleVerifier [0x0x11abc10+95936]\nE       \tGetHandleVerifier [0x0x1196b5a+9738]\nE       \tBaseThreadInitThunk [0x0x7570fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"
            },
            "teardown": {
                "duration": 3.0720256000058725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_9_dobby_visible",
            "lineno": 110,
            "outcome": "error",
            "keywords": [
                "test_tc_9_dobby_visible",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 128.33674509997945,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                    "lineno": 367,
                    "message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=52708): Read timed out. (read timeout=120)"
                },
                "traceback": [
                    {
                        "path": "environment_setup.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 454,
                        "message": "in get"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 427,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 404,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py",
                        "lineno": 428,
                        "message": "in _request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 143,
                        "message": "in request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py",
                        "lineno": 278,
                        "message": "in request_encode_body"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py",
                        "lineno": 443,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 841,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py",
                        "lineno": 474,
                        "message": "in increment"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py",
                        "lineno": 39,
                        "message": "in reraise"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 787,
                        "message": "in urlopen"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 536,
                        "message": "in _make_request"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py",
                        "lineno": 367,
                        "message": "ReadTimeoutError"
                    }
                ],
                "longrepr": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001C302440FC0>\nconn = <urllib3.connection.HTTPConnection object at 0x000001C3024410F0>, method = 'POST'\nurl = '/session/325b2a586ecccb3fc9aa7dc2bd3e8772/url', body = '{\"url\": \"https://www.guvi.in\"}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.29.0 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None\npreload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001C3020661A0>, b = <memory at 0x000001C301F953C0>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           TimeoutError: timed out\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture(scope=\"function\")\n    def setup():\n        driver = None\n    \n        try:\n            # Try launching Chrome in headless mode\n            chrome_options = ChromeOptions()\n            chrome_options.add_argument(\"--headless=new\")\n            chrome_options.add_argument(\"--no-sandbox\")\n            chrome_options.add_argument(\"--disable-dev-shm-usage\")\n            chrome_options.add_argument(\"--window-size=1920,1080\")\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n            print(\"Launched Chrome in headless mode.\")\n        except Exception as e1:\n            print(\"Chrome not available:\", e1)\n            try:\n                # Try launching Firefox in headless mode\n                firefox_options = FirefoxOptions()\n                firefox_options.add_argument(\"--headless\")\n                firefox_options.add_argument(\"--no-sandbox\")\n                firefox_options.add_argument(\"--disable-dev-shm-usage\")\n                firefox_options.add_argument(\"--window-size=1920,1080\")\n                driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=firefox_options)\n                print(\"Launched Firefox in headless mode.\")\n            except Exception as e2:\n                print(\"Firefox not available:\", e2)\n                try:\n                    # Try launching Edge in headless mode\n                    edge_options = EdgeOptions()\n                    edge_options.add_argument(\"--headless=new\")\n                    edge_options.add_argument(\"--no-sandbox\")\n                    edge_options.add_argument(\"--disable-dev-shm-usage\")\n                    edge_options.add_argument(\"--window-size=1920,1080\")\n                    driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=edge_options)\n                    print(\"Launched Edge in headless mode.\")\n                except Exception as e3:\n                    print(\"Edge not available:\", e3)\n                    raise Exception(\"No supported browser is available in headless mode on this system.\")\n    \n        # Load target website\n>       driver.get(\"https://www.guvi.in\")\n\nenvironment_setup.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001C302440FC0>\nerr = TimeoutError('timed out'), url = '/session/325b2a586ecccb3fc9aa7dc2bd3e8772/url'\ntimeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=52708): Read timed out. (read timeout=120)\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"
            },
            "teardown": {
                "duration": 0.0021911999792791903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_6_valid_login",
            "lineno": 62,
            "outcome": "passed",
            "keywords": [
                "test_tc_6_valid_login",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 61.68881649998366,
                "outcome": "passed"
            },
            "call": {
                "duration": 43.18390949998866,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 19.63240269999369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items",
            "lineno": 92,
            "outcome": "failed",
            "keywords": [
                "test_tc_8_top_menu_items",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 118.91607109998586,
                "outcome": "passed"
            },
            "call": {
                "duration": 100.38614329998381,
                "outcome": "failed",
                "crash": {
                    "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py",
                    "lineno": 232,
                    "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\n  (Session info: chrome=137.0.7151.120)\nStacktrace:\n\tGetHandleVerifier [0x0x933b03+62899]\n\tGetHandleVerifier [0x0x933b44+62964]\n\t(No symbol) [0x0x7610f3]\n\t(No symbol) [0x0x7afb30]\n\t(No symbol) [0x0x7adeea]\n\t(No symbol) [0x0x7aba67]\n\t(No symbol) [0x0x7aad37]\n\t(No symbol) [0x0x79f3e5]\n\t(No symbol) [0x0x7ce50c]\n\t(No symbol) [0x0x79ee74]\n\t(No symbol) [0x0x7ce784]\n\t(No symbol) [0x0x7efd81]\n\t(No symbol) [0x0x7ce306]\n\t(No symbol) [0x0x79d670]\n\t(No symbol) [0x0x79e4e4]\n\tGetHandleVerifier [0x0xb94793+2556483]\n\tGetHandleVerifier [0x0xb8fd02+2537394]\n\tGetHandleVerifier [0x0x95a2fa+220586]\n\tGetHandleVerifier [0x0x94aae8+157080]\n\tGetHandleVerifier [0x0x95141d+184013]\n\tGetHandleVerifier [0x0x93ba68+95512]\n\tGetHandleVerifier [0x0x93bc10+95936]\n\tGetHandleVerifier [0x0x926b5a+9738]\n\tBaseThreadInitThunk [0x0x7570fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 107,
                        "message": ""
                    },
                    {
                        "path": "Pages\\dashboard_page.py",
                        "lineno": 30,
                        "message": "in top_menu_bar"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 119,
                        "message": "in click"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py",
                        "lineno": 572,
                        "message": "in _execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py",
                        "lineno": 429,
                        "message": "in execute"
                    },
                    {
                        "path": "C:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py",
                        "lineno": 232,
                        "message": "ElementClickInterceptedException"
                    }
                ],
                "longrepr": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"976db93fe1e691ad69868ea0759f8d0f\")>\n\n    def test_tc_8_top_menu_items(setup):\n        # Create instance of loginPage\n        login = LoginPage(setup)\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Submit login form\n        login.submit_login()\n        # Create instance of DashboardPage after login\n        print(\"DashBoard instance\")\n        dashboard = DashboardPage(setup)\n        # Assert that all expected top menu items are visible\n>       assert dashboard.top_menu_bar(), \"Top menu items are missing or not visible\"\n\nTestScript\\testscript.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\dashboard_page.py:30: in top_menu_bar\n    redirecting_guvi.click()\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002205E81DA90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/\" class=\"\u2b50\ufe0fpmxwdk-0\" q:key=\"IB_3\">...</a> is not clickable at point (132, 35). Other element would receive the click: <dialog id=\"weekly-rewards-popup\" class=\"\u2b50\ufe0fwobnyk-0 modal\" open=\"\">...</dialog>\nE         (Session info: chrome=137.0.7151.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x933b03+62899]\nE       \tGetHandleVerifier [0x0x933b44+62964]\nE       \t(No symbol) [0x0x7610f3]\nE       \t(No symbol) [0x0x7afb30]\nE       \t(No symbol) [0x0x7adeea]\nE       \t(No symbol) [0x0x7aba67]\nE       \t(No symbol) [0x0x7aad37]\nE       \t(No symbol) [0x0x79f3e5]\nE       \t(No symbol) [0x0x7ce50c]\nE       \t(No symbol) [0x0x79ee74]\nE       \t(No symbol) [0x0x7ce784]\nE       \t(No symbol) [0x0x7efd81]\nE       \t(No symbol) [0x0x7ce306]\nE       \t(No symbol) [0x0x79d670]\nE       \t(No symbol) [0x0x79e4e4]\nE       \tGetHandleVerifier [0x0xb94793+2556483]\nE       \tGetHandleVerifier [0x0xb8fd02+2537394]\nE       \tGetHandleVerifier [0x0x95a2fa+220586]\nE       \tGetHandleVerifier [0x0x94aae8+157080]\nE       \tGetHandleVerifier [0x0x95141d+184013]\nE       \tGetHandleVerifier [0x0x93ba68+95512]\nE       \tGetHandleVerifier [0x0x93bc10+95936]\nE       \tGetHandleVerifier [0x0x926b5a+9738]\nE       \tBaseThreadInitThunk [0x0x7570fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776b827e+238]\n\nC:\\Users\\Rohan\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"
            },
            "teardown": {
                "duration": 4.036195799999405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_9_dobby_visible",
            "lineno": 110,
            "outcome": "passed",
            "keywords": [
                "test_tc_9_dobby_visible",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 41.767204800009495,
                "outcome": "passed"
            },
            "call": {
                "duration": 43.83828269998776,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 3.3671564999967813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items",
            "lineno": 92,
            "outcome": "failed",
            "keywords": [
                "test_tc_8_top_menu_items",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 58.26653500000248,
                "outcome": "passed"
            },
            "call": {
                "duration": 256.5614939999941,
                "outcome": "failed",
                "crash": {
                    "path": "F:\\Assignments\\python_code\\project-1\\TestScript\\testscript.py",
                    "lineno": 107,
                    "message": "AssertionError: Top menu items are missing or not visible\nassert False\n +  where False = top_menu_bar()\n +    where top_menu_bar = <Pages.dashboard_page.DashboardPage object at 0x000001EF1A05D010>.top_menu_bar"
                },
                "traceback": [
                    {
                        "path": "TestScript\\testscript.py",
                        "lineno": 107,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3454fac9d4607804822bab82dd59b30c\")>\n\n    def test_tc_8_top_menu_items(setup):\n        # Create instance of loginPage\n        login = LoginPage(setup)\n        login.click_login_button()\n        # Enter a valid email\n        login.enter_email(data.VALID_EMAIL)\n        # Enter a valid password\n        login.enter_password(data.VALID_PASSWORD)\n        # Submit login form\n        login.submit_login()\n        # Create instance of DashboardPage after login\n        print(\"DashBoard instance\")\n        dashboard = DashboardPage(setup)\n        # Assert that all expected top menu items are visible\n>       assert dashboard.top_menu_bar(), \"Top menu items are missing or not visible\"\nE       AssertionError: Top menu items are missing or not visible\nE       assert False\nE        +  where False = top_menu_bar()\nE        +    where top_menu_bar = <Pages.dashboard_page.DashboardPage object at 0x000001EF1A05D010>.top_menu_bar\n\nTestScript\\testscript.py:107: AssertionError"
            },
            "teardown": {
                "duration": 9.706682599993655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "TestScript/testscript.py::test_tc_8_top_menu_items",
            "lineno": 92,
            "outcome": "passed",
            "keywords": [
                "test_tc_8_top_menu_items",
                "testscript.py",
                "TestScript",
                "project-1",
                ""
            ],
            "setup": {
                "duration": 71.01564120000694,
                "outcome": "passed"
            },
            "call": {
                "duration": 104.38525039999513,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 5.270020299998578,
                "outcome": "passed"
            }
        }
    ]
}